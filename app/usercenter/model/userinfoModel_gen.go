// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userinfoFieldNames          = builder.RawFieldNames(&Userinfo{})
	userinfoRows                = strings.Join(userinfoFieldNames, ",")
	userinfoRowsExpectAutoSet   = strings.Join(stringx.Remove(userinfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userinfoRowsWithPlaceHolder = strings.Join(stringx.Remove(userinfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheCloudmindUsercenterUserinfoIdPrefix    = "cache:cloudmindUsercenter:userinfo:id:"
	cacheCloudmindUsercenterUserinfoEmailPrefix = "cache:cloudmindUsercenter:userinfo:email:"
)

type (
	userinfoModel interface {
		Insert(ctx context.Context, data *Userinfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Userinfo, error)
		FindOneByEmail(ctx context.Context, email string) (*Userinfo, error)
		Update(ctx context.Context, data *Userinfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserinfoModel struct {
		sqlc.CachedConn
		table string
	}

	Userinfo struct {
		Id         int64          `db:"id"`          // 用户id
		Email      string         `db:"email"`       // 邮箱号
		Nickname   sql.NullString `db:"nickname"`    // 用户名
		Password   string         `db:"password"`    // 密码
		Sex        int64          `db:"sex"`         // 性别
		Avatar     string         `db:"avatar"`      // 头像
		Qq         string         `db:"qq"`          // QQ号
		Wx         string         `db:"wx"`          // 微信号
		CreateTime time.Time      `db:"create_time"` // 注册时间
		Name       string         `db:"name"`        // 真实姓名
		Idcard     string         `db:"idcard"`      // 身份证号
	}
)

func newUserinfoModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserinfoModel {
	return &defaultUserinfoModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`userinfo`",
	}
}

func (m *defaultUserinfoModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	cloudmindUsercenterUserinfoEmailKey := fmt.Sprintf("%s%v", cacheCloudmindUsercenterUserinfoEmailPrefix, data.Email)
	cloudmindUsercenterUserinfoIdKey := fmt.Sprintf("%s%v", cacheCloudmindUsercenterUserinfoIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, cloudmindUsercenterUserinfoEmailKey, cloudmindUsercenterUserinfoIdKey)
	return err
}

func (m *defaultUserinfoModel) FindOne(ctx context.Context, id int64) (*Userinfo, error) {
	cloudmindUsercenterUserinfoIdKey := fmt.Sprintf("%s%v", cacheCloudmindUsercenterUserinfoIdPrefix, id)
	var resp Userinfo
	err := m.QueryRowCtx(ctx, &resp, cloudmindUsercenterUserinfoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userinfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserinfoModel) FindOneByEmail(ctx context.Context, email string) (*Userinfo, error) {
	cloudmindUsercenterUserinfoEmailKey := fmt.Sprintf("%s%v", cacheCloudmindUsercenterUserinfoEmailPrefix, email)
	var resp Userinfo
	err := m.QueryRowIndexCtx(ctx, &resp, cloudmindUsercenterUserinfoEmailKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", userinfoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, email); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserinfoModel) Insert(ctx context.Context, data *Userinfo) (sql.Result, error) {
	cloudmindUsercenterUserinfoEmailKey := fmt.Sprintf("%s%v", cacheCloudmindUsercenterUserinfoEmailPrefix, data.Email)
	cloudmindUsercenterUserinfoIdKey := fmt.Sprintf("%s%v", cacheCloudmindUsercenterUserinfoIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, userinfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Email, data.Nickname, data.Password, data.Sex, data.Avatar, data.Qq, data.Wx, data.Name, data.Idcard)
	}, cloudmindUsercenterUserinfoEmailKey, cloudmindUsercenterUserinfoIdKey)
	return ret, err
}

func (m *defaultUserinfoModel) Update(ctx context.Context, newData *Userinfo) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	cloudmindUsercenterUserinfoEmailKey := fmt.Sprintf("%s%v", cacheCloudmindUsercenterUserinfoEmailPrefix, data.Email)
	cloudmindUsercenterUserinfoIdKey := fmt.Sprintf("%s%v", cacheCloudmindUsercenterUserinfoIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userinfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Email, newData.Nickname, newData.Password, newData.Sex, newData.Avatar, newData.Qq, newData.Wx, newData.Name, newData.Idcard, newData.Id)
	}, cloudmindUsercenterUserinfoEmailKey, cloudmindUsercenterUserinfoIdKey)
	return err
}

func (m *defaultUserinfoModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheCloudmindUsercenterUserinfoIdPrefix, primary)
}

func (m *defaultUserinfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userinfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserinfoModel) tableName() string {
	return m.table
}

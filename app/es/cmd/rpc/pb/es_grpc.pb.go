// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: es.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Es_SearchFor_FullMethodName = "/pb.es/SearchFor"
	Es_Insert_FullMethodName    = "/pb.es/Insert"
)

// EsClient is the client API for Es service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EsClient interface {
	SearchFor(ctx context.Context, in *SearchForReq, opts ...grpc.CallOption) (*SearchForResp, error)
	Insert(ctx context.Context, in *InsertReq, opts ...grpc.CallOption) (*InsertResp, error)
}

type esClient struct {
	cc grpc.ClientConnInterface
}

func NewEsClient(cc grpc.ClientConnInterface) EsClient {
	return &esClient{cc}
}

func (c *esClient) SearchFor(ctx context.Context, in *SearchForReq, opts ...grpc.CallOption) (*SearchForResp, error) {
	out := new(SearchForResp)
	err := c.cc.Invoke(ctx, Es_SearchFor_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *esClient) Insert(ctx context.Context, in *InsertReq, opts ...grpc.CallOption) (*InsertResp, error) {
	out := new(InsertResp)
	err := c.cc.Invoke(ctx, Es_Insert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EsServer is the server API for Es service.
// All implementations must embed UnimplementedEsServer
// for forward compatibility
type EsServer interface {
	SearchFor(context.Context, *SearchForReq) (*SearchForResp, error)
	Insert(context.Context, *InsertReq) (*InsertResp, error)
	mustEmbedUnimplementedEsServer()
}

// UnimplementedEsServer must be embedded to have forward compatible implementations.
type UnimplementedEsServer struct {
}

func (UnimplementedEsServer) SearchFor(context.Context, *SearchForReq) (*SearchForResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchFor not implemented")
}
func (UnimplementedEsServer) Insert(context.Context, *InsertReq) (*InsertResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedEsServer) mustEmbedUnimplementedEsServer() {}

// UnsafeEsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EsServer will
// result in compilation errors.
type UnsafeEsServer interface {
	mustEmbedUnimplementedEsServer()
}

func RegisterEsServer(s grpc.ServiceRegistrar, srv EsServer) {
	s.RegisterService(&Es_ServiceDesc, srv)
}

func _Es_SearchFor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchForReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsServer).SearchFor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Es_SearchFor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsServer).SearchFor(ctx, req.(*SearchForReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Es_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EsServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Es_Insert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EsServer).Insert(ctx, req.(*InsertReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Es_ServiceDesc is the grpc.ServiceDesc for Es service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Es_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.es",
	HandlerType: (*EsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchFor",
			Handler:    _Es_SearchFor_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _Es_Insert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "es.proto",
}

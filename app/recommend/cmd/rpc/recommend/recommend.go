// Code generated by goctl. DO NOT EDIT.
// Source: recommend.proto

package recommend

import (
	"context"

	"CloudMind/app/recommend/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteItemReq            = pb.DeleteItemReq
	DeleteItemResp           = pb.DeleteItemResp
	FeedBack                 = pb.FeedBack
	GetRecommendByItemIdReq  = pb.GetRecommendByItemIdReq
	GetRecommendByItemIdResp = pb.GetRecommendByItemIdResp
	GetRecommendByUserIdReq  = pb.GetRecommendByUserIdReq
	GetRecommendByUserIdResp = pb.GetRecommendByUserIdResp
	InsertFeedBackReq        = pb.InsertFeedBackReq
	InsertFeedBackResp       = pb.InsertFeedBackResp
	InsertItemReq            = pb.InsertItemReq
	InsertItemResp           = pb.InsertItemResp
	Item                     = pb.Item
	ItemPatch                = pb.ItemPatch
	UpdateItemReq            = pb.UpdateItemReq
	UpdateItemResp           = pb.UpdateItemResp
	User                     = pb.User

	Recommend interface {
		InsertFeedBack(ctx context.Context, in *InsertFeedBackReq, opts ...grpc.CallOption) (*InsertFeedBackResp, error)
		InsertItem(ctx context.Context, in *InsertItemReq, opts ...grpc.CallOption) (*InsertItemResp, error)
		DeleteItem(ctx context.Context, in *DeleteItemReq, opts ...grpc.CallOption) (*DeleteItemResp, error)
		UpdateItem(ctx context.Context, in *UpdateItemReq, opts ...grpc.CallOption) (*UpdateItemResp, error)
		GetRecommendByItem(ctx context.Context, in *GetRecommendByItemIdReq, opts ...grpc.CallOption) (*GetRecommendByItemIdResp, error)
		GetRecommendByUserId(ctx context.Context, in *GetRecommendByUserIdReq, opts ...grpc.CallOption) (*GetRecommendByUserIdResp, error)
	}

	defaultRecommend struct {
		cli zrpc.Client
	}
)

func NewRecommend(cli zrpc.Client) Recommend {
	return &defaultRecommend{
		cli: cli,
	}
}

func (m *defaultRecommend) InsertFeedBack(ctx context.Context, in *InsertFeedBackReq, opts ...grpc.CallOption) (*InsertFeedBackResp, error) {
	client := pb.NewRecommendClient(m.cli.Conn())
	return client.InsertFeedBack(ctx, in, opts...)
}

func (m *defaultRecommend) InsertItem(ctx context.Context, in *InsertItemReq, opts ...grpc.CallOption) (*InsertItemResp, error) {
	client := pb.NewRecommendClient(m.cli.Conn())
	return client.InsertItem(ctx, in, opts...)
}

func (m *defaultRecommend) DeleteItem(ctx context.Context, in *DeleteItemReq, opts ...grpc.CallOption) (*DeleteItemResp, error) {
	client := pb.NewRecommendClient(m.cli.Conn())
	return client.DeleteItem(ctx, in, opts...)
}

func (m *defaultRecommend) UpdateItem(ctx context.Context, in *UpdateItemReq, opts ...grpc.CallOption) (*UpdateItemResp, error) {
	client := pb.NewRecommendClient(m.cli.Conn())
	return client.UpdateItem(ctx, in, opts...)
}

func (m *defaultRecommend) GetRecommendByItem(ctx context.Context, in *GetRecommendByItemIdReq, opts ...grpc.CallOption) (*GetRecommendByItemIdResp, error) {
	client := pb.NewRecommendClient(m.cli.Conn())
	return client.GetRecommendByItem(ctx, in, opts...)
}

func (m *defaultRecommend) GetRecommendByUserId(ctx context.Context, in *GetRecommendByUserIdReq, opts ...grpc.CallOption) (*GetRecommendByUserIdResp, error) {
	client := pb.NewRecommendClient(m.cli.Conn())
	return client.GetRecommendByUserId(ctx, in, opts...)
}

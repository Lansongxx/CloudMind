// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: recommend.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Recommend_InsertFeedBack_FullMethodName       = "/pb.recommend/InsertFeedBack"
	Recommend_InsertItem_FullMethodName           = "/pb.recommend/InsertItem"
	Recommend_DeleteItem_FullMethodName           = "/pb.recommend/DeleteItem"
	Recommend_UpdateItem_FullMethodName           = "/pb.recommend/UpdateItem"
	Recommend_GetRecommendByItem_FullMethodName   = "/pb.recommend/GetRecommendByItem"
	Recommend_GetRecommendByUserId_FullMethodName = "/pb.recommend/GetRecommendByUserId"
)

// RecommendClient is the client API for Recommend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecommendClient interface {
	InsertFeedBack(ctx context.Context, in *InsertFeedBackReq, opts ...grpc.CallOption) (*InsertFeedBackResp, error)
	InsertItem(ctx context.Context, in *InsertItemReq, opts ...grpc.CallOption) (*InsertItemResp, error)
	DeleteItem(ctx context.Context, in *DeleteItemReq, opts ...grpc.CallOption) (*DeleteItemResp, error)
	UpdateItem(ctx context.Context, in *UpdateItemReq, opts ...grpc.CallOption) (*UpdateItemResp, error)
	GetRecommendByItem(ctx context.Context, in *GetRecommendByItemIdReq, opts ...grpc.CallOption) (*GetRecommendByItemIdResp, error)
	GetRecommendByUserId(ctx context.Context, in *GetRecommendByUserIdReq, opts ...grpc.CallOption) (*GetRecommendByUserIdResp, error)
}

type recommendClient struct {
	cc grpc.ClientConnInterface
}

func NewRecommendClient(cc grpc.ClientConnInterface) RecommendClient {
	return &recommendClient{cc}
}

func (c *recommendClient) InsertFeedBack(ctx context.Context, in *InsertFeedBackReq, opts ...grpc.CallOption) (*InsertFeedBackResp, error) {
	out := new(InsertFeedBackResp)
	err := c.cc.Invoke(ctx, Recommend_InsertFeedBack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendClient) InsertItem(ctx context.Context, in *InsertItemReq, opts ...grpc.CallOption) (*InsertItemResp, error) {
	out := new(InsertItemResp)
	err := c.cc.Invoke(ctx, Recommend_InsertItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendClient) DeleteItem(ctx context.Context, in *DeleteItemReq, opts ...grpc.CallOption) (*DeleteItemResp, error) {
	out := new(DeleteItemResp)
	err := c.cc.Invoke(ctx, Recommend_DeleteItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendClient) UpdateItem(ctx context.Context, in *UpdateItemReq, opts ...grpc.CallOption) (*UpdateItemResp, error) {
	out := new(UpdateItemResp)
	err := c.cc.Invoke(ctx, Recommend_UpdateItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendClient) GetRecommendByItem(ctx context.Context, in *GetRecommendByItemIdReq, opts ...grpc.CallOption) (*GetRecommendByItemIdResp, error) {
	out := new(GetRecommendByItemIdResp)
	err := c.cc.Invoke(ctx, Recommend_GetRecommendByItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendClient) GetRecommendByUserId(ctx context.Context, in *GetRecommendByUserIdReq, opts ...grpc.CallOption) (*GetRecommendByUserIdResp, error) {
	out := new(GetRecommendByUserIdResp)
	err := c.cc.Invoke(ctx, Recommend_GetRecommendByUserId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecommendServer is the server API for Recommend service.
// All implementations must embed UnimplementedRecommendServer
// for forward compatibility
type RecommendServer interface {
	InsertFeedBack(context.Context, *InsertFeedBackReq) (*InsertFeedBackResp, error)
	InsertItem(context.Context, *InsertItemReq) (*InsertItemResp, error)
	DeleteItem(context.Context, *DeleteItemReq) (*DeleteItemResp, error)
	UpdateItem(context.Context, *UpdateItemReq) (*UpdateItemResp, error)
	GetRecommendByItem(context.Context, *GetRecommendByItemIdReq) (*GetRecommendByItemIdResp, error)
	GetRecommendByUserId(context.Context, *GetRecommendByUserIdReq) (*GetRecommendByUserIdResp, error)
	mustEmbedUnimplementedRecommendServer()
}

// UnimplementedRecommendServer must be embedded to have forward compatible implementations.
type UnimplementedRecommendServer struct {
}

func (UnimplementedRecommendServer) InsertFeedBack(context.Context, *InsertFeedBackReq) (*InsertFeedBackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertFeedBack not implemented")
}
func (UnimplementedRecommendServer) InsertItem(context.Context, *InsertItemReq) (*InsertItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertItem not implemented")
}
func (UnimplementedRecommendServer) DeleteItem(context.Context, *DeleteItemReq) (*DeleteItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedRecommendServer) UpdateItem(context.Context, *UpdateItemReq) (*UpdateItemResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedRecommendServer) GetRecommendByItem(context.Context, *GetRecommendByItemIdReq) (*GetRecommendByItemIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendByItem not implemented")
}
func (UnimplementedRecommendServer) GetRecommendByUserId(context.Context, *GetRecommendByUserIdReq) (*GetRecommendByUserIdResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecommendByUserId not implemented")
}
func (UnimplementedRecommendServer) mustEmbedUnimplementedRecommendServer() {}

// UnsafeRecommendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecommendServer will
// result in compilation errors.
type UnsafeRecommendServer interface {
	mustEmbedUnimplementedRecommendServer()
}

func RegisterRecommendServer(s grpc.ServiceRegistrar, srv RecommendServer) {
	s.RegisterService(&Recommend_ServiceDesc, srv)
}

func _Recommend_InsertFeedBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertFeedBackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendServer).InsertFeedBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recommend_InsertFeedBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendServer).InsertFeedBack(ctx, req.(*InsertFeedBackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recommend_InsertItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendServer).InsertItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recommend_InsertItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendServer).InsertItem(ctx, req.(*InsertItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recommend_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendServer).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recommend_DeleteItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendServer).DeleteItem(ctx, req.(*DeleteItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recommend_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendServer).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recommend_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendServer).UpdateItem(ctx, req.(*UpdateItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recommend_GetRecommendByItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendByItemIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendServer).GetRecommendByItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recommend_GetRecommendByItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendServer).GetRecommendByItem(ctx, req.(*GetRecommendByItemIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recommend_GetRecommendByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecommendByUserIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendServer).GetRecommendByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recommend_GetRecommendByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendServer).GetRecommendByUserId(ctx, req.(*GetRecommendByUserIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Recommend_ServiceDesc is the grpc.ServiceDesc for Recommend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recommend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.recommend",
	HandlerType: (*RecommendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertFeedBack",
			Handler:    _Recommend_InsertFeedBack_Handler,
		},
		{
			MethodName: "InsertItem",
			Handler:    _Recommend_InsertItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _Recommend_DeleteItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _Recommend_UpdateItem_Handler,
		},
		{
			MethodName: "GetRecommendByItem",
			Handler:    _Recommend_GetRecommendByItem_Handler,
		},
		{
			MethodName: "GetRecommendByUserId",
			Handler:    _Recommend_GetRecommendByUserId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recommend.proto",
}
